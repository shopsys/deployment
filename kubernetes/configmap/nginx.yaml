apiVersion: v1
kind: ConfigMap
metadata:
    name: nginx-default-config
data:
    nginx.conf: |
        user  nginx;
        worker_processes 2;

        error_log   /dev/stderr warn;
        pid         /var/run/nginx.pid;

        events {
            # determines how much clients will be served per worker
            # max clients = worker_connections * worker_processes
            # max clients is also limited by the number of socket connections available on the system (~64k)
            worker_connections 512;
        }

        http {
            include       /etc/nginx/mime.types;
            default_type  application/octet-stream;

            log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                '$status $body_bytes_sent "$http_referer" '
                '"$http_user_agent" "$http_x_forwarded_for" '
                '"host=$host" '
                'upstream_response_time=$upstream_response_time';

            access_log /dev/stdout main;

            sendfile        on;
            tcp_nopush      on;
            tcp_nodelay     on;

            keepalive_timeout  65;

            server_names_hash_bucket_size 64;

            include /etc/nginx/conf.d/*.conf;
        }
    project-nginx.conf: |
        gzip on;
        gzip_comp_level 5;
        gzip_min_length 256;
        gzip_proxied any;
        gzip_vary on;
        gzip_types  text/plain
                    text/css
                    text/javascript
                    application/javascript
                    application/json
                    application/xml
                    application/rss+xml
                    image/svg+xml;

        upstream php-upstream {
            server php-fpm:9000;
        }

        upstream storefront-upstream {
            server storefront:3000;
        }

        # storefront error page if accessed directly, plain text 404 if accessed via CDN
        map "$http_cdn_vshosting_real_ip$http_cdn_vshosting_real_ip_img" $custom_error_target {
            default @storefront;
            "~.+"  @404;
        }

        server {
            listen 80;
            root /var/www/html/web;

            location /health {
                stub_status  on;
                access_log   off;
            }
        }

        server {
            listen 8080;
            root /var/www/html/web;
            server_tokens off;
            proxy_ignore_client_abort on;

            proxy_buffer_size 16k;
            proxy_buffers 32 16k;

            client_body_buffer_size 32k;
            client_header_buffer_size 1k;
            client_max_body_size    32m;
            large_client_header_buffers 4 8k;

            fastcgi_buffer_size 16k;
            fastcgi_buffers 32 16k;

            types_hash_max_size 2048;

            set_real_ip_from  10.0.0.0/8;
            set_real_ip_from 103.21.244.0/22;
            set_real_ip_from 103.22.200.0/22;
            set_real_ip_from 103.31.4.0/22;
            set_real_ip_from 104.16.0.0/13;
            set_real_ip_from 104.24.0.0/14;
            set_real_ip_from 108.162.192.0/18;
            set_real_ip_from 131.0.72.0/22;
            set_real_ip_from 141.101.64.0/18;
            set_real_ip_from 162.158.0.0/15;
            set_real_ip_from 172.64.0.0/13;
            set_real_ip_from 173.245.48.0/20;
            set_real_ip_from 188.114.96.0/20;
            set_real_ip_from 190.93.240.0/20;
            set_real_ip_from 197.234.240.0/22;
            set_real_ip_from 198.41.128.0/17;
            set_real_ip_from 2400:cb00::/32;
            set_real_ip_from 2606:4700::/32;
            set_real_ip_from 2803:f800::/32;
            set_real_ip_from 2405:b500::/32;
            set_real_ip_from 2405:8100::/32;
            set_real_ip_from 2a06:98c0::/29;
            set_real_ip_from 2c0f:f248::/32;

            real_ip_header    X-Forwarded-For;
            real_ip_recursive on;

            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Credentials "false" always;
            add_header VSHCDN-WEBP-QUALITY 90;
            add_header X-Frame-Options "SAMEORIGIN";
            add_header X-Content-Type-Options "nosniff";

            set $request_host $http_host;
            if ($http_originalhost) {
                set $request_host $http_originalhost;
            }

            # define code to be used to redirect to the proper upstream
            error_page 470 = @app;
            error_page 469 = @storefront;
            error_page 468 = @imageResizer;

            location = /resolve-friendly-url {
                allow 10.0.0.0/8;
                allow 127.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;

                fastcgi_pass php-upstream;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $realpath_root/resolveFriendlyUrl.php;
            }

            # (?:/|$) in regexes is used to match /path, /path/, /path/subpath but not /pathology

            # location always using the app backend, no static files
            location ~ ^/(?:[^/]+/)?(graphql|_profiler|_wdt|_error)(?:/|$) {
                return 470; # send to @app
            }

            # location for administration interface, uses admin error pages
            location ~ ^/(?:[^/]+/)?({{ADMIN_URL}}|ckeditor|elfinder(\.main\.js)?|efconnect|build|bundles)(?:/|$) {
                # hide dotfiles (send to @app)
                location ~ /\. {
                    return 470; # send to @app
                }

                try_files $uri @app;
            }
        
            # location for static files, uses storefront error pages
            location ~ ^/(public)/ {
                # hide dotfiles (send to @app)
                location ~ /\. {
                    return 469; # send to @storefront
                }

                try_files $uri $custom_error_target;
            }

            location ~ ^/content/images/(?<entity_name>\w+)(?<image_type>/\w+)?/(?<image_size>(default|original|galleryThumbnail|modal|list|thumbnail|thumbnailSmall|thumbnailExtraSmall|thumbnailMedium|header|footer|productList|productListSecondRow|cartPreview|productListMiddle|productListMiddleRetina|listAside|listGrid|searchThumbnail|listBig)/)(?<add_image_id>\d+--)?(?<image_name>([\w\-]+_)?(?<image_id>\d+))\.(?<image_extension>jpg|jpeg|png|gif) {
                 expires 1w;
                 return 301 $scheme://$http_host/content/images/$entity_name$image_type/$image_name.$image_extension$is_args$args;
            }

            # location for images, strip image name and serve image by its ID (send to imageResizer if there are width/height args)
            location ~ ^/(?:[^/]+/)?(content(?:-test)?/images/.+)/(?<image_name>([\w\-]+_)?(?<image_id>\d+))\.(?<image_extension>jpe?g|png|gif) {
                expires 1y;

                error_page              403 404 = $custom_error_target;
                # this needs to be repeated here because of nginx error_page inheritance rules
                error_page              468 = @imageResizer;

                if ($is_args != '') {
                    return 468; # send to @imageResizer
                }

                proxy_intercept_errors  on;

                proxy_http_version      1.1;
                proxy_set_header        Authorization "";
                proxy_buffering         off;

                proxy_pass {{S3_ENDPOINT}}/{{PROJECT_NAME}}/web/$1/$image_id.$image_extension;
            }

            location ~ ^/(content)/ {
                proxy_intercept_errors  on;
                error_page              404 = $custom_error_target;

                proxy_http_version      1.1;
                proxy_set_header        Authorization "";
                proxy_buffering         off;

                proxy_pass              {{S3_ENDPOINT}}/{{PROJECT_NAME}}/web$request_uri;
            }

            # location for backend routes used by customers
            # they have to force storefront 404 page if not found
            # throw NotFoundRedirectToStorefrontException to trigger this behavior
            location ~ ^/(?:[^/]+/)?(file|customer-file/(view|download)|personal-overview-export/xml|social-network/login|convertim)(?:/|$) {
                location ~ /\. {
                    # hide dotfiles (send to @storefront)
                    return 469;
                }
        
                try_files $uri @app;
            }

            location ^~ /_next/ {
                return 469; # send to @storefront
            }

            # disallow access to dynamic content from CDN
            location ~ / {
                if ($http_cdn_vshosting_real_ip != '') {
                    return 403;
                }
                if ($http_cdn_vshosting_real_ip_img != '') {
                    return 403;
                }

                return 469; # send to @storefront
            }

            location @storefront {
                internal;
                proxy_hide_header Access-Control-Allow-Origin;
                proxy_set_header Host $http_host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "Upgrade";
                proxy_pass http://storefront-upstream;
            }

            location @app {
                fastcgi_pass php-upstream;
                include fastcgi_params;
                fastcgi_param HTTP_HOST $request_host;
                # use $realpath_root instead of $document_root
                # because of symlink switching when deploying
                fastcgi_send_timeout 120s;
                fastcgi_read_timeout 120s;
                fastcgi_param DOCUMENT_ROOT $realpath_root;
                fastcgi_param SCRIPT_FILENAME $realpath_root/index.php;
                fastcgi_param HTTPS $http_x_forwarded_proto;
            }

            location @imageResizer {
                fastcgi_pass php-upstream;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $realpath_root/imageResizer.php;
            }
        
            # plain 404 page for missing files accessed via CDN
            # to avoid displaying storefront on the CDN domain
            location @404 {
                internal;
                types {}
                default_type text/html;
                return 404 "File not found";
            }
        }
